---
openapi: 3.1.0
servers:
- url: http://localhost:5000/pets/v1
  description: Development server
- url: https://staging.example.com/pets/stg/v1
  description: Staging server
- url: https://api.example.com/pets/prod/v1
  description: Production server
paths:
  "/pets":
    get:
      summary: List all pets
      parameters:
      - "$ref": "#/components/parameters/limit"
      responses:
        '200': 
          description: A list of pets
          content:
            application/json:
              $ref: "#/components/schemas/Pets"
            application/xml:
              $ref: "#/components/schemas/Pets"
  "/cats.{_format}":
    get:
      summary: List all cats
      parameters:
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A list of cats
          content:
            application/json:
              $ref: "#/components/schemas/Pets"
            application/xml:
              $ref: "#/components/schemas/Pets"
  "/cat/{catId}.{_format}":
    get:
      summary: Info for a specific cat
      parameters:
      - name: catId
        in: path
        required: true
        schema:
          type: string
          pattern: "^cat:\\d+$"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A list of cats
          content:
            application/json:
              $ref: "#/components/schemas/Pets"
            application/xml:
              $ref: "#/components/schemas/Pets"
  "/cat_or_dog/{preferredPet}.{_format}":
    get:
      summary: What is your preferred pet?
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/preferredPet"
      responses:
        '200':
          description: A list of cats
          content:
            application/json:
              $ref: "#/components/schemas/Pets"
            application/xml:
              $ref: "#/components/schemas/Pets"
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: "cat:1"
        name:
          type: string
          example: "Cat"
        tag:
          type: string
          example: "Cat"
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    format:
      name: _format
      in: path
      required: true
      schema:
        type: string
        enum:
        - json
        - xml
    preferredPet:
      name: preferredPet
      in: path
      required: true
      schema:
        type: string
        enum:
        - cat
        - dog
        pattern: ^(cat|dog)$
    offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      required: false
      description: The number of items to skip before starting to collect the result set.
    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 50
      required: false
      description: The number of items to return.
