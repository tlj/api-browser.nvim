local mock = require("luassert.mock")

describe("endpoint-previewer.endpoints", function()
  local module = require("endpoint-previewer.endpoints")

  describe("invalid api", function()
    it("has errors", function()
      local result = module.get_by_api_name("invalid api")
      assert.is_nil(result)
    end)
  end)

  describe("global", function()
    local body = '{"global":{"endpoints":[{"url":"/{lang}/matches.json"},{"url":"/{lang}/match/{matchId}.json"},{"url":"/{lang}/notches.json","defaults":{"lang":["de"]}},{"url":"/{lang}/endpoint.{format}"}],"defaults":{"lang":["en"],"format":["json","xml"]},"requirements":{"matchId":"^match:\\\\d+$"}}}'
    it("has two endpoints", function()
      module.parse(body)
      local result = module.get_by_api_name("")
      assert.is_not_nil(result)
      assert.equals(5, #result)
      assert.equals("/en/matches.json", result[1].url)
      assert.equals("/en/match/{matchId}.json", result[2].url)
      assert.is_same({"matchId"}, result[2].placeholders)
      assert.equals("/{lang}/notches.json", result[3].original_url)
      assert.is_same({lang = "de"}, result[3].replaced)
      assert.equals("/de/notches.json", result[3].url)
      assert.equals("/en/endpoint.json", result[4].url)
      assert.equals("/en/endpoint.xml",result[5].url)
      assert.is_same({lang = "en", format = "xml"}, result[5].replaced)
    end)
  end)
end)
